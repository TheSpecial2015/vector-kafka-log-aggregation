services:
  log-generator-vector:
    build:
      context: ./go-log-generator
      dockerfile: Dockerfile
    container_name: log-generator-vector
    volumes:
      - ./logs:/logs
    environment:
      - TZ=UTC
      - VECTOR_KAFKA_BROKER=kafka:9092
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - logs-network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - logs-network

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_CREATE_TOPICS=logs:1:1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_LINGER_MS=1 # 1ms linger
      - KAFKA_BUFFER_MEMORY=33554432 # 32MB, plenty for 5 msg/sec
      - KAFKA_NUM_NETWORK_THREADS=3 # Handle small load fast
      - KAFKA_NUM_IO_THREADS=8 # Handle small load fast
    depends_on:
      zookeeper:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics.sh",
          "--describe",
          "--topic",
          "logs",
          "--bootstrap-server",
          "localhost:9092",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - logs-network

  go-consumer:
    build:
      context: ./go-consumer
      dockerfile: Dockerfile
    container_name: go-consumer
    depends_on:
      #- redis
      - kafka
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=admin
      - KAFKA_BROKER=kafka:9092
    networks:
      - logs-network

  # redis:
  #   image: redis:latest
  #   container_name: redis
  #   ports:
  #     - "6379:6379"
  #   command: redis-server --requirepass "admin" # Optional: adds authentication
  #   networks:
  #     - logs-network

  sveltekit-app:
    build:
      context: ./svelte-dashboard
      dockerfile: Dockerfile
    container_name: sveltekit_app
    ports:
      - "3000:3000" # Maps host port 3000 to container port 3000
    environment:
      - NODE_ENV=production # Set to 'development' for dev mode
      - VITE_API_URL=http://localhost:3000/api # Example env var for SvelteKit
    networks:
      - logs-network

  # python-consumer:
  #   build: ./consumer
  #   container_name: python-consumer
  #   depends_on:
  #     - kafka
  #   environment:
  #     - KAFKA_BROKER=kafka:9092
  #   restart: unless-stopped
  #   networks:
  #     - logs-network

networks:
  logs-network:
    driver: bridge
