services:
  log-generator-vector:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: log-generator-vector
    volumes:
      - ./logs:/logs
    environment:
      - TZ=UTC
      - VECTOR_KAFKA_BROKER=kafka:9092
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - logs-network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - logs-network

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_CREATE_TOPICS=logs:1:1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    depends_on:
      zookeeper:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics.sh",
          "--describe",
          "--topic",
          "logs",
          "--bootstrap-server",
          "localhost:9092",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - logs-network

  python-consumer:
    build: ./consumer
    container_name: python-consumer
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKER=kafka:9092
    restart: unless-stopped
    networks:
      - logs-network

networks:
  logs-network:
    driver: bridge
